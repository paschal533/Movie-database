{"version":3,"sources":["components/Search.js","components/Result.js","components/Results.js","components/Popup.js","App.js","serviceWorker.js","index.js"],"names":["Search","handleInput","search","className","placeholder","type","onChange","onClick","Result","result","openPopup","imdbID","Grid","container","spacing","item","xs","sm","src","Poster","alt","Title","Results","results","name","map","key","Popup","selected","closePopup","Year","Box","component","mb","borderColor","Typography","Rating","defaultValue","imdbRating","precision","max","readOnly","Plot","Button","color","App","useState","s","state","setState","apiurl","e","target","value","prevState","axios","then","data","id","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.21c9e7c9.chunk.js","sourcesContent":["import React from 'react';\n\n\nfunction Search ({ handleInput, search }) {\n    return (\n        <section className=\"search\">\n           <input \n           placeholder=\"search for a movie.....\" \n           type=\"text\" className=\"searchbox\" \n           onChange={handleInput}\n           /><button \n           placeholder=\"search\" \n           className=\"button\"\n           onClick={search}\n            >search</button>\n        </section>\n    )\n}\n\nexport default Search;","import React from 'react';\nimport Grid from '@material-ui/core/Grid';\n \n\n\nfunction Result({ result, openPopup }) {\n    return (     \n        <div className=\"result\" onClick={() => openPopup(result.imdbID)} >\n            <Grid container spacing={1}>\n              <Grid item xs={6} sm={4}>\n               <img src={result.Poster}  alt={result.Poster}  />\n               <h3>{result.Title}</h3>\n              </Grid> \n            </Grid>\n        </div>\n    )\n}\n\n\nexport default Result;","import React from 'react';\nimport Result from './Result'\n\n\nfunction Results({ results, openPopup, name }) {\n    return (\n        <div className=\"results\">\n            {(results) ? results.map(result => (  \n                <Result key={result.imdbID} result={result} openPopup={openPopup} />\n            )) : <p className=\"not-found\">sorry, we could'nt find {name}</p>}\n\n        </div>\n    )\n}\n\n\nexport default Results;","import React from 'react';\nimport Rating from '@material-ui/lab/Rating';\nimport Typography from '@material-ui/core/Typography';\nimport Box from '@material-ui/core/Box';\nimport Button from '@material-ui/core/Button';\n\n\n\nfunction Popup({ selected, closePopup}) {\n    return (\n        <section className=\"popup\">\n           <div className=\"content\">\n              <h2>{selected.Title} <span>{(selected.Year)}</span></h2>\n              <div className=\"rating\"> \n                <Box component=\"fieldset\" mb={3} borderColor=\"transparent\">\n                    <Typography component=\"legend\">Rating</Typography>\n                    <Rating\n                         name=\"half-rating-read\" \n                         defaultValue={selected.imdbRating} \n                         precision={0.5}\n                         max={10} \n                         readOnly\n                        />\n                </Box>\n              </div>\n            <div>\n                  <img src={selected.Poster} alt={selected.Poster} />\n                  <p> {selected.Plot} </p>\n              </div>\n              <Button className=\"close\" onClick={closePopup} color=\"primary\"> close </Button>\n           </div>\n        </section>\n    )\n}\n\nexport default Popup;","import React, { useState } from 'react';\nimport Search from './components/Search';\nimport Results from './components/Results';\nimport Popup from './components/Popup';\nimport './index.css';\nimport axios from 'axios';\n\n\n\nconst App = () => {\n  const [state, setState] = useState({\n    s:\"\",\n    results:[],\n    selected:{}\n  });\n  const apiurl = \"https://www.omdbapi.com/?&apikey=fd478337\";\n  const search = (e) => {\n    axios(apiurl + \"&s=\" + state.s).then(({ data }) => {\n      let results = data.Search;\n      setState(prevState => {\n        return{ ...prevState, results: results }\n      })\n    })\n  }\n\n  const handleInput = (e) => {\n    let s = e.target.value;\n    setState(prevState => {\n       return { ...prevState, s:s}\n    });\n  }\n\n  const openPopup = id => {\n    axios(apiurl + \"&i=\" + id).then(({ data }) => {\n      let result = data;\n      setState(prevState => {\n        return {  ...prevState, selected: result }\n      });\n    });\n  }\n\n  const closePopup = () => {\n    setState(prevState => {\n      return { ...prevState, selected: {} }\n    })\n  }\n\n\n  return (\n    <div className=\"App\">\n       <header>\n         <h1>MOVIE DATABASE</h1>\n       </header>\n       <main>\n         <Search handleInput={handleInput} search={search}/>\n         <Results  results={state.results} openPopup={openPopup} name={state.s}/>\n         {(typeof state.selected.Title !=\"undefined\") ? <Popup selected={state.selected} \n         closePopup={closePopup} /> : false}\n       </main>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}